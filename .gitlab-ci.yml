stages:
  - build
  - deploy
  - sonarqube-check
  - sonarqube-vulnerability-report
# Cache downloaded dependencies and plugins between builds.
# Not strictly necessary, but speeds up the builds.
cache:
  key: "$CI_JOB_NAME"
  paths:
    # Must be within the repository under test hence we can't use the
    # default ~/.m2
    - .m2/repository
    - .sonar/cache
variables:
  # Use the cached directory above.
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  PACKAGE_NAME: ""
  BACK_DIR: ""
  IP_ADDRESS: "192.168.75.79"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

deploy-prod:
  stage: deploy
  image: maven:3.8.5-openjdk-17 # docker image with Maven
  only:
    - CI
  before_script:
    - chmod +x $CI_PROJECT_DIR/ci/setup-mvn-proxy.sh
    - $CI_PROJECT_DIR/ci/setup-mvn-proxy.sh
    - chmod 400 $CI_SSH_KEY
  script:
    # build api
    #- cd $CI_PROJECT_DIR/tp4
    #- mvn clean package
    #- scp -o StrictHostKeyChecking=no -i $CI_SSH_KEY target/$PACKAGE_NAME gitlabci@$IP_ADDRESS:/opt/tomcat/webapps/v3.war
    # build client
    - scp -o StrictHostKeyChecking=no -i $CI_SSH_KEY -r -v $CI_PROJECT_DIR/front/* gitlabci@$IP_ADDRESS:/usr/share/nginx/multimif

sonarqube-check:
  stage: sonarqube-check
  image: maven:3-eclipse-temurin-17
  script: 
    - mvn verify sonar:sonar
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop

sonarqube-vulnerability-report:
  stage: sonarqube-vulnerability-report
  script:
    - 'curl -u "${SonarQubeToken}:" "${SonarQubeURL}/api/issues/gitlab_sast_export?projectKey=multimif_multimif-8_AY6FQPc7u4zgX3p-IR2I&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop
  artifacts:
    expire_in: 1 day
    reports:
      sast: gl-sast-sonar-report.json
  dependencies:
    - sonarqube-check
